diff --git a/main/java/com/nestandrest/config/DbConfig.java b/main/java/com/nestandrest/config/DbConfig.java
index 0b5ae66..d69da14 100644
--- a/main/java/com/nestandrest/config/DbConfig.java
+++ b/main/java/com/nestandrest/config/DbConfig.java
@@ -13,7 +13,7 @@ public class DbConfig {
 
 	// Database configuration information
 	private static final String DB_NAME = "nest_and_rest";
-	private static final String URL = "jdbc:mysql://localhost:3307/" + DB_NAME;
+	private static final String URL = "jdbc:mysql://localhost:3306/" + DB_NAME;
 	private static final String USERNAME = "root";
 	private static final String PASSWORD = "";
 
diff --git a/main/java/com/nestandrest/controller/ProductDetailsController.java b/main/java/com/nestandrest/controller/ProductDetailsController.java
index f99e0ba..94841f1 100644
--- a/main/java/com/nestandrest/controller/ProductDetailsController.java
+++ b/main/java/com/nestandrest/controller/ProductDetailsController.java
@@ -3,6 +3,9 @@ package com.nestandrest.controller;
 import java.io.IOException;
 
 import com.nestandrest.model.Product;
+import com.nestandrest.model.ProductModel;
+import com.nestandrest.model.ProductVariantModel;
+import com.nestandrest.service.ProductService;
 import com.nestandrest.util.ProductData;
 
 import jakarta.servlet.ServletException;
@@ -12,29 +15,44 @@ import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import java.util.List;
 
-@WebServlet(asyncSupported = true, urlPatterns = {"/product-details"})
+@WebServlet(asyncSupported = true, urlPatterns = { "/product-details" })
 public class ProductDetailsController extends HttpServlet {
-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-        try {
-            String idParam = req.getParameter("id");
-
-            if (idParam != null) {
-                int id = Integer.parseInt(idParam);
-                List<Product> allProducts = ProductData.getAllProducts();
-
-                if (id >= 0 && id < allProducts.size()) {
-                    Product product = allProducts.get(id);
-                    req.setAttribute("product", product);
-                } else {
-                    req.setAttribute("error", "Invalid product ID");
-                }
-            } else {
-                req.setAttribute("error", "Product ID is missing");
-            }
-        } catch (NumberFormatException e) {
-            req.setAttribute("error", "Invalid product ID format");
-        }
-
-        req.getRequestDispatcher("/WEB-INF/pages/products/product-details.jsp").forward(req, resp);
-    }
+	private static final long serialVersionUID = 1L;
+	private ProductService productService;
+
+	@Override
+	public void init() throws ServletException {
+		this.productService = new ProductService();
+	}
+
+	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+		try {
+			String idParam = req.getParameter("id");
+
+			if (idParam != null) {
+				int id = Integer.parseInt(idParam);
+
+				if (id >= 0) {
+					ProductModel product = productService.getById(id);
+					List<ProductVariantModel> productVariants = productService.getVariantsOfAProduct(id);
+
+					req.setAttribute("product", product);
+					req.setAttribute("productVariants", productVariants);
+				} else {
+					req.setAttribute("error", "Invalid product ID");
+				}
+			} else {
+				req.setAttribute("error", "Product ID is missing");
+			}
+		} catch (NumberFormatException e) {
+			req.setAttribute("error", "Invalid product ID format");
+		}
+
+		req.getRequestDispatcher("/WEB-INF/pages/products/product-details.jsp").forward(req, resp);
+	}
+
+	@Override
+	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+		req.getRequestDispatcher("/WEB-INF/pages/products/product-details.jsp").forward(req, resp);
+	}
 }
\ No newline at end of file
diff --git a/main/java/com/nestandrest/controller/ProductListingController.java b/main/java/com/nestandrest/controller/ProductListingController.java
index 23a79f6..b823cfb 100644
--- a/main/java/com/nestandrest/controller/ProductListingController.java
+++ b/main/java/com/nestandrest/controller/ProductListingController.java
@@ -1,6 +1,8 @@
 package com.nestandrest.controller;
 
 import com.nestandrest.model.Product;
+import com.nestandrest.model.ProductModel;
+import com.nestandrest.service.ProductService;
 import com.nestandrest.util.ProductData;
 
 import jakarta.servlet.ServletException;
@@ -10,54 +12,73 @@ import java.io.IOException;
 import java.util.List;
 import java.util.stream.Collectors;
 
-@WebServlet(asyncSupported = true, urlPatterns = {"/products"})
+@WebServlet(asyncSupported = true, urlPatterns = { "/products" })
 public class ProductListingController extends HttpServlet {
-    private static final int PAGE_SIZE = 12;
-
-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
-    	String category = req.getParameter("category");
-    	if (category == null || category.trim().isEmpty()) {
-    	    category = "all"; // Ensure this is set
-    	}
-    	final String categoryFilter = category;
-    	
-    	req.setAttribute("selectedCategory", category);
-
-        String pageParam = req.getParameter("page");
-        int page = (pageParam != null) ? Integer.parseInt(pageParam) : 1;
-
-
-     // Get all products
-        List<Product> allProducts = ProductData.getAllProducts();
-
-        // Filter
-        List<Product> filteredProducts = categoryFilter.equals("all") ?
-                allProducts :
-                allProducts.stream()
-                           .filter(p -> p.getCategory().equalsIgnoreCase(categoryFilter))
-                           .collect(Collectors.toList());
-
-        // Pagination logic
-        int totalProducts = filteredProducts.size();
-        int totalPages = (int) Math.ceil((double) totalProducts / PAGE_SIZE);
-
-        int start = (page - 1) * PAGE_SIZE;
-        int end = Math.min(start + PAGE_SIZE, totalProducts);
-
-        // Handle out-of-range start index
-        List<Product> paginated;
-        if (start >= totalProducts) {
-            paginated = List.of(); // return an empty list
-        } else {
-            paginated = filteredProducts.subList(start, end);
-        }
-
-        // Set attributes
-        req.setAttribute("products", paginated);
-        req.setAttribute("totalPages", totalPages);
-        req.setAttribute("currentPage", page);
-        req.setAttribute("selectedCategory", category);
-
-        req.getRequestDispatcher("/WEB-INF/pages/products/product-listing.jsp").forward(req, resp);
-    }
+	private static final int PAGE_SIZE = 8;
+	private ProductService productService;
+
+	@Override
+	public void init() throws ServletException {
+		this.productService = new ProductService();
+	}
+
+	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+		req.setAttribute("allCategories", this.productService.getAllCategories());
+
+		// Get currently selected category
+		String category = req.getParameter("category");
+		if (category == null || category.trim().isEmpty()) {
+			category = "0"; // Ensure this is set
+		}
+		final String categoryFilter = category;
+		req.setAttribute("selectedCategory", category);
+
+		// Get search query
+		String search = req.getParameter("search");
+		if (search == null || search.trim().isEmpty()) {
+			search = "";
+		}
+		req.setAttribute("searchQuery", search);
+
+		// Get order by
+		String orderBy = req.getParameter("order");
+		if (orderBy == null || orderBy.trim().isEmpty()) {
+			orderBy = "product_id";
+		}
+		req.setAttribute("orderByQuery", orderBy);
+
+		String pageParam = req.getParameter("page");
+		int page = (pageParam != null) ? Integer.parseInt(pageParam) : 1;
+
+		// Get all products
+		List<ProductModel> allProducts = this.productService.getProducts(search, orderBy);
+
+		// Filter
+		List<ProductModel> filteredProducts = categoryFilter.equals("0") ? allProducts
+				: allProducts.stream().filter(p -> Integer.toString(p.getCategoryId()).equalsIgnoreCase(categoryFilter))
+						.collect(Collectors.toList());
+
+		// Pagination logic
+		int totalProducts = filteredProducts.size();
+		int totalPages = (int) Math.ceil((double) totalProducts / PAGE_SIZE);
+
+		int start = (page - 1) * PAGE_SIZE;
+		int end = Math.min(start + PAGE_SIZE, totalProducts);
+
+		// Handle out-of-range start index
+		List<ProductModel> paginated;
+		if (start >= totalProducts) {
+			paginated = List.of(); // return an empty list
+		} else {
+			paginated = filteredProducts.subList(start, end);
+		}
+
+		// Set attributes
+		req.setAttribute("products", paginated);
+		req.setAttribute("totalPages", totalPages);
+		req.setAttribute("currentPage", page);
+		req.setAttribute("selectedCategory", category);
+
+		req.getRequestDispatcher("/WEB-INF/pages/products/product-listing.jsp").forward(req, resp);
+	}
 }
diff --git a/main/java/com/nestandrest/model/CartItem.java b/main/java/com/nestandrest/model/CartItem.java
deleted file mode 100644
index 0e2233e..0000000
--- a/main/java/com/nestandrest/model/CartItem.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.nestandrest.model;
-
-public class CartItem {
-    private int id;
-    private String productName; 
-    private int productId;
-    private int quantity;
-    private double price;
-
-    // getters and setters
-    public int getId() { return id; }
-    public void setId(int id) { this.id = id; }
-
-    public String getProductName() {
-        return productName;
-    }
-
-    public void setProductName(String productName) {
-        this.productName = productName;
-    }
-    
-    public int getProductId() { return productId; }
-    public void setProductId(int productId) { this.productId = productId; }
-
-    public int getQuantity() { return quantity; }
-    public void setQuantity(int quantity) { this.quantity = quantity; }
-
-    public double getPrice() { return price; }
-    public void setPrice(double price) { this.price = price; }
-}
diff --git a/main/java/com/nestandrest/model/CartModel.java b/main/java/com/nestandrest/model/CartModel.java
new file mode 100644
index 0000000..024bbb6
--- /dev/null
+++ b/main/java/com/nestandrest/model/CartModel.java
@@ -0,0 +1,28 @@
+package com.nestandrest.model;
+
+public class CartModel {
+	private int cartId;
+	private int userId;
+
+	public CartModel(int cartId, int userId) {
+		super();
+		this.cartId = cartId;
+		this.userId = userId;
+	}
+
+	public int getCartId() {
+		return cartId;
+	}
+
+	public void setCartId(int cartId) {
+		this.cartId = cartId;
+	}
+
+	public int getUserId() {
+		return userId;
+	}
+
+	public void setUserId(int userId) {
+		this.userId = userId;
+	}
+}
diff --git a/main/java/com/nestandrest/model/CartProductModel.java b/main/java/com/nestandrest/model/CartProductModel.java
new file mode 100644
index 0000000..cabacae
--- /dev/null
+++ b/main/java/com/nestandrest/model/CartProductModel.java
@@ -0,0 +1,28 @@
+package com.nestandrest.model;
+
+public class CartProductModel {
+	private int cartId;
+	private int productId;
+
+	public CartProductModel(int cartId, int productId) {
+		super();
+		this.cartId = cartId;
+		this.productId = productId;
+	}
+
+	public int getCartId() {
+		return cartId;
+	}
+
+	public void setCartId(int cartId) {
+		this.cartId = cartId;
+	}
+
+	public int getProductId() {
+		return productId;
+	}
+
+	public void setProductId(int productId) {
+		this.productId = productId;
+	}
+}
diff --git a/main/java/com/nestandrest/model/CartProductVariantValueModel.java b/main/java/com/nestandrest/model/CartProductVariantValueModel.java
new file mode 100644
index 0000000..ebcf107
--- /dev/null
+++ b/main/java/com/nestandrest/model/CartProductVariantValueModel.java
@@ -0,0 +1,80 @@
+package com.nestandrest.model;
+
+public class CartProductVariantValueModel {
+	private int cartProductVariantValueId;
+	private int cartId;
+	private int productId;
+	private int productVariantId;
+	private int productVariantValueId;
+	private int qty;
+
+	public CartProductVariantValueModel(int cartProductVariantValueId, int cartId, int productId, int productVariantId,
+			int productVariantValueId, int qty) {
+		super();
+		this.cartProductVariantValueId = cartProductVariantValueId;
+		this.cartId = cartId;
+		this.productId = productId;
+		this.productVariantId = productVariantId;
+		this.productVariantValueId = productVariantValueId;
+		this.qty = qty;
+	}
+
+	public CartProductVariantValueModel(int cartId, int productId, int productVariantId, int productVariantValueId,
+			int qty) {
+		super();
+		this.cartId = cartId;
+		this.productId = productId;
+		this.productVariantId = productVariantId;
+		this.productVariantValueId = productVariantValueId;
+		this.qty = qty;
+	}
+
+	public int getCartProductVariantValueId() {
+		return cartProductVariantValueId;
+	}
+
+	public void setCartProductVariantValueId(int cartProductVariantValueId) {
+		this.cartProductVariantValueId = cartProductVariantValueId;
+	}
+
+	public int getCartId() {
+		return cartId;
+	}
+
+	public void setCartId(int cartId) {
+		this.cartId = cartId;
+	}
+
+	public int getProductId() {
+		return productId;
+	}
+
+	public void setProductId(int productId) {
+		this.productId = productId;
+	}
+
+	public int getProductVariantId() {
+		return productVariantId;
+	}
+
+	public void setProductVariantId(int productVariantId) {
+		this.productVariantId = productVariantId;
+	}
+
+	public int getProductVariantValueId() {
+		return productVariantValueId;
+	}
+
+	public void setProductVariantValueId(int productVariantValueId) {
+		this.productVariantValueId = productVariantValueId;
+	}
+
+	public int getQty() {
+		return qty;
+	}
+
+	public void setQty(int qty) {
+		this.qty = qty;
+	}
+
+}
diff --git a/main/java/com/nestandrest/model/Category.java b/main/java/com/nestandrest/model/Category.java
index d436626..ec3154c 100644
--- a/main/java/com/nestandrest/model/Category.java
+++ b/main/java/com/nestandrest/model/Category.java
@@ -1,16 +1,41 @@
 package com.nestandrest.model;
 
 public class Category {
-    private int categoryId;
-    private String name;
-    private String description;
-
-    public Category() {}
-
-    public int getCategoryId() { return categoryId; }
-    public void setCategoryId(int categoryId) { this.categoryId = categoryId; }
-    public String getName() { return name; }
-    public void setName(String name) { this.name = name; }
-    public String getDescription() { return description; }
-    public void setDescription(String description) { this.description = description; }
+	private int categoryId;
+	private String name;
+	private String description;
+
+	public Category() {
+	}
+
+	public Category(int categoryId, String name, String description) {
+		super();
+		this.categoryId = categoryId;
+		this.name = name;
+		this.description = description;
+	}
+
+	public int getCategoryId() {
+		return categoryId;
+	}
+
+	public void setCategoryId(int categoryId) {
+		this.categoryId = categoryId;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
 }
\ No newline at end of file
diff --git a/main/java/com/nestandrest/model/ProductModel.java b/main/java/com/nestandrest/model/ProductModel.java
new file mode 100644
index 0000000..953ea03
--- /dev/null
+++ b/main/java/com/nestandrest/model/ProductModel.java
@@ -0,0 +1,111 @@
+package com.nestandrest.model;
+
+public class ProductModel {
+	private int productId;
+	private String name;
+	private String shortDescription;
+	private String longDescription;
+	private double price;
+	private double discountedPrice;
+	private int categoryId;
+	private String category;
+	private int stockQty;
+
+	public ProductModel(int productId, String name, String shortDescription, String longDescription, double price,
+			double discountedPrice, int categoryId, int stockQty) {
+		super();
+		this.productId = productId;
+		this.name = name;
+		this.shortDescription = shortDescription;
+		this.longDescription = longDescription;
+		this.price = price;
+		this.discountedPrice = discountedPrice;
+		this.categoryId = categoryId;
+		this.stockQty = stockQty;
+	}
+
+	public ProductModel(int productId, String name, String shortDescription, String longDescription, double price,
+			double discountedPrice, int categoryId, String category) {
+		super();
+		this.productId = productId;
+		this.name = name;
+		this.shortDescription = shortDescription;
+		this.longDescription = longDescription;
+		this.price = price;
+		this.discountedPrice = discountedPrice;
+		this.categoryId = categoryId;
+		this.category = category;
+	}
+
+	public int getProductId() {
+		return productId;
+	}
+
+	public void setProductId(int productId) {
+		this.productId = productId;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public String getShortDescription() {
+		return shortDescription;
+	}
+
+	public void setShortDescription(String shortDescription) {
+		this.shortDescription = shortDescription;
+	}
+
+	public String getLongDescription() {
+		return longDescription;
+	}
+
+	public void setLongDescription(String longDescription) {
+		this.longDescription = longDescription;
+	}
+
+	public double getPrice() {
+		return price;
+	}
+
+	public void setPrice(double price) {
+		this.price = price;
+	}
+
+	public double getDiscountedPrice() {
+		return discountedPrice;
+	}
+
+	public void setDiscountedPrice(double discountedPrice) {
+		this.discountedPrice = discountedPrice;
+	}
+
+	public int getCategoryId() {
+		return categoryId;
+	}
+
+	public void setCategoryId(int categoryId) {
+		this.categoryId = categoryId;
+	}
+
+	public String getCategory() {
+		return category;
+	}
+
+	public void setCategory(String category) {
+		this.category = category;
+	}
+
+	public int getStockQty() {
+		return stockQty;
+	}
+
+	public void setStockQty(int stockQty) {
+		this.stockQty = stockQty;
+	}
+}
diff --git a/main/java/com/nestandrest/model/ProductVariantModel.java b/main/java/com/nestandrest/model/ProductVariantModel.java
new file mode 100644
index 0000000..45c5476
--- /dev/null
+++ b/main/java/com/nestandrest/model/ProductVariantModel.java
@@ -0,0 +1,40 @@
+package com.nestandrest.model;
+
+import java.util.List;
+
+public class ProductVariantModel {
+	private int productVariantId;
+	private String variantName;
+	private List<ProductVariantValueModel> variantValues;
+
+	public ProductVariantModel(int productVariantId, String variantName, List<ProductVariantValueModel> variantValues) {
+		super();
+		this.productVariantId = productVariantId;
+		this.variantName = variantName;
+		this.variantValues = variantValues;
+	}
+
+	public int getProductVariantId() {
+		return productVariantId;
+	}
+
+	public void setProductVariantId(int productVariantId) {
+		this.productVariantId = productVariantId;
+	}
+
+	public String getVariantName() {
+		return variantName;
+	}
+
+	public void setVariantName(String variantName) {
+		this.variantName = variantName;
+	}
+
+	public List<ProductVariantValueModel> getVariantValues() {
+		return variantValues;
+	}
+
+	public void setVariantValues(List<ProductVariantValueModel> variantValues) {
+		this.variantValues = variantValues;
+	}
+}
diff --git a/main/java/com/nestandrest/model/ProductVariantValueModel.java b/main/java/com/nestandrest/model/ProductVariantValueModel.java
new file mode 100644
index 0000000..33ca8ee
--- /dev/null
+++ b/main/java/com/nestandrest/model/ProductVariantValueModel.java
@@ -0,0 +1,38 @@
+package com.nestandrest.model;
+
+public class ProductVariantValueModel {
+	private int productVariantValueId;
+	private int productVariantId;
+	private String variantValue;
+
+	public ProductVariantValueModel(int productVariantValueId, int productVariantId, String variantValue) {
+		super();
+		this.productVariantValueId = productVariantValueId;
+		this.productVariantId = productVariantId;
+		this.variantValue = variantValue;
+	}
+
+	public int getProductVariantValueId() {
+		return productVariantValueId;
+	}
+
+	public void setProductVariantValueId(int productVariantValueId) {
+		this.productVariantValueId = productVariantValueId;
+	}
+
+	public int getProductVariantId() {
+		return productVariantId;
+	}
+
+	public void setProductVariantId(int productVariantId) {
+		this.productVariantId = productVariantId;
+	}
+
+	public String getVariantValue() {
+		return variantValue;
+	}
+
+	public void setVariantValue(String variantValue) {
+		this.variantValue = variantValue;
+	}
+}
diff --git a/main/java/com/nestandrest/service/CartService.java b/main/java/com/nestandrest/service/CartService.java
new file mode 100644
index 0000000..ef4dc97
--- /dev/null
+++ b/main/java/com/nestandrest/service/CartService.java
@@ -0,0 +1,94 @@
+package com.nestandrest.service;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+
+import com.nestandrest.config.DbConfig;
+import com.nestandrest.model.CartProductVariantValueModel;
+import com.nestandrest.model.ProductVariantModel;
+import com.nestandrest.model.ProductVariantValueModel;
+
+public class CartService {
+	private Connection dbConn;
+
+	public CartService() {
+		try {
+			this.dbConn = DbConfig.getDbConnection();
+		} catch (SQLException | ClassNotFoundException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public boolean addProductToCart(int userId, int productId, List<ProductVariantModel> variants, int qty) {
+		int cartId = this.createUserCartAndReturnIfNotExist(userId);
+		if (cartId == -1) {
+			return false;
+		}
+
+		for (ProductVariantModel entry : variants) {
+			for (ProductVariantValueModel valueEntry : entry.getVariantValues()) {
+				insertCartProductVariantValue(new CartProductVariantValueModel(cartId, productId,
+						entry.getProductVariantId(), valueEntry.getProductVariantValueId(), qty));
+			}
+		}
+
+		return false;
+	}
+
+	private int createUserCartAndReturnIfNotExist(int userId) {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available.");
+			return -1;
+		}
+
+		try {
+			// Upsert the user's cart
+			String insertQuery = "INSERT IGNORE INTO `cart` (`user_id`) VALUES (?);";
+			PreparedStatement insertStmt = dbConn.prepareStatement(insertQuery);
+			insertStmt.setInt(1, userId);
+			insertStmt.executeUpdate();
+
+			// Get the user's cart
+			String selectQuery = "SELECT * FROM `cart` WHERE `cart`.`user_id` = ?";
+			PreparedStatement selectStmt = dbConn.prepareStatement(selectQuery);
+			selectStmt.setInt(1, userId);
+			ResultSet rs = selectStmt.executeQuery();
+			if (rs.next()) {
+				return rs.getInt("cart_id");
+			}
+		} catch (SQLException e) {
+			System.err.println("Error during user cart: " + e.getMessage());
+			e.printStackTrace();
+			return -1;
+		}
+		return -1;
+	}
+
+	private Boolean insertCartProductVariantValue(CartProductVariantValueModel cartProductVariantValue) {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available.");
+			return null;
+		}
+
+		String insertQuery = "INSERT INTO `cart_product_variant_value` (`cart_id`, `product_id`, `product_variant_id`, `product_variant_value_id`, `qty`) VALUES (?, ?, ?, ?, ?);";
+		try {
+			// Insert to user's cart
+			PreparedStatement insertStmt = dbConn.prepareStatement(insertQuery);
+			insertStmt.setInt(1, cartProductVariantValue.getCartId());
+			insertStmt.setInt(2, cartProductVariantValue.getProductId());
+			insertStmt.setInt(3, cartProductVariantValue.getProductVariantId());
+			insertStmt.setInt(4, cartProductVariantValue.getProductVariantId());
+			insertStmt.setInt(5, cartProductVariantValue.getQty());
+			insertStmt.executeUpdate();
+		} catch (SQLException e) {
+			System.err.println("Error during inserting cart item: " + e.getMessage());
+			e.printStackTrace();
+			return null;
+		}
+		return null;
+	}
+}
diff --git a/main/java/com/nestandrest/service/ProductService.java b/main/java/com/nestandrest/service/ProductService.java
index 111b974..b685c2f 100644
--- a/main/java/com/nestandrest/service/ProductService.java
+++ b/main/java/com/nestandrest/service/ProductService.java
@@ -4,77 +4,235 @@ import com.nestandrest.dao.CategoryDAO;
 import com.nestandrest.dao.ProductDAO;
 import com.nestandrest.model.Category;
 import com.nestandrest.model.Product;
+import com.nestandrest.model.ProductModel;
+import com.nestandrest.model.ProductVariantModel;
+import com.nestandrest.model.ProductVariantValueModel;
 import com.nestandrest.config.DbConfig;
 import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.util.ArrayList;
 import java.util.List;
 
 public class ProductService {
-    private ProductDAO productDAO;
-    private CategoryDAO categoryDAO;
-
-    public ProductService() {
-        try {
-            Connection connection = DbConfig.getDbConnection();
-            this.productDAO = new ProductDAO(connection);
-            this.categoryDAO = new CategoryDAO(connection);
-        } catch (SQLException | ClassNotFoundException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void addProduct(Product product) {
-        try {
-            product.setStock(product.getQuantity()); // Set stock equal to quantity
-            product.setInStock(product.getQuantity() > 0);
-            productDAO.addProduct(product);
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public List<Product> getAllProducts() {
-        try {
-            return productDAO.getAllProducts();
-        } catch (SQLException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    public Product getProductById(int productId) {
-        try {
-            return productDAO.getProductById(productId);
-        } catch (SQLException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    public void updateProduct(Product product) {
-        try {
-            product.setStock(product.getQuantity());
-            product.setInStock(product.getQuantity() > 0);
-            productDAO.updateProduct(product);
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void deleteProduct(int productId) {
-        try {
-            productDAO.deleteProduct(productId);
-        } catch (SQLException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public List<Category> getAllCategories() {
-        try {
-            return categoryDAO.getAllCategories();
-        } catch (SQLException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
+	private ProductDAO productDAO;
+	private CategoryDAO categoryDAO;
+	private Connection dbConn;
+
+	public ProductService() {
+		try {
+			this.dbConn = DbConfig.getDbConnection();
+			this.productDAO = new ProductDAO(dbConn);
+			this.categoryDAO = new CategoryDAO(dbConn);
+		} catch (SQLException | ClassNotFoundException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void addProduct(Product product) {
+		try {
+			product.setStock(product.getQuantity()); // Set stock equal to quantity
+			product.setInStock(product.getQuantity() > 0);
+			productDAO.addProduct(product);
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public List<Product> getAllProducts() {
+		try {
+			return productDAO.getAllProducts();
+		} catch (SQLException e) {
+			e.printStackTrace();
+			return null;
+		}
+	}
+
+	public Product getProductById(int productId) {
+		try {
+			return productDAO.getProductById(productId);
+		} catch (SQLException e) {
+			e.printStackTrace();
+			return null;
+		}
+	}
+
+	public void updateProduct(Product product) {
+		try {
+			product.setStock(product.getQuantity());
+			product.setInStock(product.getQuantity() > 0);
+			productDAO.updateProduct(product);
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void deleteProduct(int productId) {
+		try {
+			productDAO.deleteProduct(productId);
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public List<Category> getAllCategories() {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available!");
+			return null;
+		}
+
+		String query = "SELECT * FROM category";
+
+		try {
+			PreparedStatement genderStmt = dbConn.prepareStatement(query);
+			ResultSet result = genderStmt.executeQuery();
+
+			List<Category> categories = new ArrayList<Category>();
+
+			while (result.next()) {
+				categories.add(new Category(result.getInt("category_id"), result.getString("name"),
+						result.getString("description")));
+			}
+
+			return categories;
+		} catch (SQLException e) {
+			System.err.println("Error during products get: " + e.getMessage());
+			e.printStackTrace();
+			return null;
+		}
+	}
+
+	//////////////////////
+
+	public List<ProductModel> getProducts(String searchQuery, String orderBy) {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available!");
+			return null;
+		}
+
+		if (searchQuery == null) {
+			searchQuery = "";
+		}
+		if (orderBy == null) {
+			orderBy = "new";
+		}
+
+		String orderByDir = "ASC";
+		switch (orderBy) {
+		case "cheap":
+			orderBy = "price";
+			orderByDir = "ASC";
+			break;
+		case "expensive":
+			orderBy = "price";
+			orderByDir = "DESC";
+		case "new":
+		default:
+			orderBy = "product_id";
+			break;
+		}
+
+		String query = "SELECT p.*, c.name as category_name FROM product p JOIN category c ON p.category_id = c.category_id WHERE LOWER(p.name) LIKE ? ORDER BY "
+				+ orderBy + " " + orderByDir;
+
+		try {
+			PreparedStatement genderStmt = dbConn.prepareStatement(query);
+			genderStmt.setString(1, "%" + searchQuery + "%");
+			ResultSet result = genderStmt.executeQuery();
+
+			List<ProductModel> products = new ArrayList<ProductModel>();
+
+			while (result.next()) {
+				products.add(new ProductModel(result.getInt("product_id"), result.getString("name"),
+						result.getString("short_description"), result.getString("long_description"),
+						result.getDouble("price"), result.getDouble("discounted_price"), result.getInt("category_id"),
+						result.getString("category_name")));
+			}
+
+			return products;
+		} catch (SQLException e) {
+			System.err.println("Error during products get: " + e.getMessage());
+			e.printStackTrace();
+			return null;
+		}
+	}
+
+	public ProductModel getById(int id) {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available!");
+			return null;
+		}
+
+		String query = "SELECT * FROM product p WHERE p.product_id = ?";
+
+		try {
+			PreparedStatement genderStmt = dbConn.prepareStatement(query);
+			genderStmt.setInt(1, id);
+			ResultSet result = genderStmt.executeQuery();
+
+			if (result.next()) {
+				return new ProductModel(result.getInt("product_id"), result.getString("name"),
+						result.getString("short_description"), result.getString("long_description"),
+						result.getDouble("price"), result.getDouble("discounted_price"), result.getInt("category_id"),
+						result.getInt("stock_qty"));
+			}
+
+			return null;
+		} catch (SQLException e) {
+			System.err.println("Error during product get: " + e.getMessage());
+			e.printStackTrace();
+			return null;
+		}
+	}
+
+	public List<ProductVariantModel> getVariantsOfAProduct(int productId) {
+		if (dbConn == null) {
+			System.err.println("Database connection is not available!");
+			return null;
+		}
+
+		String query = "SELECT pv.*, pvv.* FROM `product_variant` pv LEFT JOIN `product_variant_value` pvv ON pv.product_variant_id = pvv.product_variant_id LEFT JOIN product p ON pv.product_id = p.product_id WHERE p.product_id = ?";
+
+		try {
+			PreparedStatement genderStmt = dbConn.prepareStatement(query);
+			genderStmt.setInt(1, productId);
+			ResultSet result = genderStmt.executeQuery();
+
+			List<ProductVariantModel> productVariants = new ArrayList<ProductVariantModel>();
+
+			while (result.next()) {
+				int productVariantId = result.getInt("product_variant_id");
+				String variantName = result.getString("variant_name");
+				int productVariantVariantValueId = result.getInt("product_variant_value_id");
+				String variantValue = result.getString("variant_value");
+
+				int addedIdx = -1;
+				for (int i = 0; i < productVariants.size(); i++) {
+					ProductVariantModel variantEntry = productVariants.get(i);
+					if (variantEntry.getProductVariantId() == productVariantId) {
+						addedIdx = i;
+						break;
+					}
+				}
+
+				if (addedIdx == -1) {
+					productVariants.add(new ProductVariantModel(productVariantId, variantName,
+							new ArrayList<ProductVariantValueModel>()));
+					addedIdx = productVariants.size() - 1;
+				}
+
+				List<ProductVariantValueModel> productVariantValues = productVariants.get(addedIdx).getVariantValues();
+				productVariantValues.add(
+						new ProductVariantValueModel(productVariantVariantValueId, productVariantId, variantValue));
+				productVariants.get(addedIdx).setVariantValues(productVariantValues);
+			}
+
+			return productVariants;
+		} catch (SQLException e) {
+			System.err.println("Error during products get: " + e.getMessage());
+			e.printStackTrace();
+			return null;
+		}
+	}
 }
\ No newline at end of file
diff --git a/main/webapp/WEB-INF/pages/products/product-details.jsp b/main/webapp/WEB-INF/pages/products/product-details.jsp
index 6ab454e..c6f234a 100644
--- a/main/webapp/WEB-INF/pages/products/product-details.jsp
+++ b/main/webapp/WEB-INF/pages/products/product-details.jsp
@@ -1,25 +1,29 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8"
 	pageEncoding="UTF-8"%>
-<%@ page import="com.nestandrest.model.Product" %>
+<%@ page import="com.nestandrest.model.ProductModel"%>
+<%@ page import="com.nestandrest.model.ProductVariantModel"%>
+<%@ page import="com.nestandrest.model.ProductVariantValueModel"%>
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Product Details - Nest and Rest</title>
-    <jsp:include page="../head.jsp" />
-    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/product-details.css">
+<meta charset="UTF-8">
+<meta name="viewport" content="width=device-width, initial-scale=1.0">
+<title>Product Details - Nest and Rest</title>
+<jsp:include page="../head.jsp" />
+<link rel="stylesheet"
+	href="${pageContext.request.contextPath}/css/product-details.css">
 </head>
 <body>
-<jsp:include page="../header.jsp" />
-<main class="product-details container">
-<%
-    Product product = (Product) request.getAttribute("product");
-    if (product != null) {
-%>
+	<jsp:include page="../header.jsp" />
+	<main class="product-details container">
+		<%
+		ProductModel product = (ProductModel) request.getAttribute("product");
+		if (product != null) {
+		%>
 		<nav class="breadcrumb">
-			<a href="${pageContext.request.contextPath}/index.jsp">Home</a> &gt;
-			<a href="${pageContext.request.contextPath}/products">Shop</a> &gt; <span><%= product.getName() %></span>
+			<a href="${pageContext.request.contextPath}/home">Home</a> &gt; <a
+				href="${pageContext.request.contextPath}/products">Shop</a> &gt; <span><%=product.getName()%></span>
 		</nav>
 
 		<div class="product-top">
@@ -27,7 +31,7 @@
 				<button class="arrow left" onclick="prevSlide()">&#10094;</button>
 
 				<img id="mainImage" class="main-image"
-					src="<%=request.getContextPath()%>/resources/system/images/<%=product.getImage()%>"
+					src="<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>.png"
 					alt="<%=product.getName()%>">
 
 				<button class="arrow right" onclick="nextSlide()">&#10095;</button>
@@ -38,7 +42,7 @@
 					%>
 					<!-- repeat 5 thumbnails for now -->
 					<img class="thumbnail"
-						src="<%=request.getContextPath()%>/resources/system/images/<%=product.getImage()%>"
+						src="<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId() + (i == 0 ? "" : "-" + (i + 1))%>.png"
 						onclick="changeSlide(<%=i%>)">
 					<%
 					}
@@ -49,83 +53,115 @@
 
 
 			<div class="product-info">
-            <span class="badge">SALE</span>
-            <h1><%= product.getName() %></h1>
-            <p class="price">
-                <span class="original">Rs. <%= product.getPrice() + 1500 %></span>
-                <span class="discounted">Rs. <%= product.getPrice() %></span>
-            </p>
-            <p class="short-description">
-                The simple style sofa is a great choice to relax and enjoy a nice day, take a nap or chat with your family or friends. The armchair, with an elegant design, fits perfectly into any living room decor.
-            </p>
-
-				<form class="product-options" action="product-details" method="get">
-    <!-- Passing the product ID as hidden input -->
-    <input type="hidden" name="id" value="<%= product.getProductId() %>">
-
-    <div class="option-row">
-        <label for="size">Size</label>
-        <select name="size" id="size">
-            <option>10.5</option>
-            <option>11</option>
-            <option>12</option>
-        </select>
-    </div>
-
-    <div class="option-row">
-        <label for="quantity">Quantity</label>
-        <div class="quantity-control">
-            <button type="button" onclick="decreaseQuantity()">-</button>
-            <input type="number" name="quantity" value="1" min="1">
-            <button type="button" onclick="increaseQuantity()">+</button>
-        </div>
-    </div>
-
-    <button type="submit" class="add-to-cart">
-        <span class="cart-icon"></span> Add to cart
-    </button>
-</form>
+				<c:if test="${product.getDiscountedPrice() != 0.0}">
+					<span class="badge">SALE</span>
+				</c:if>
+				<h1><%=product.getName()%></h1>
+				<p class="price">
+					<c:if test="${product.getDiscountedPrice() != 0.0}">
+						<span class="original">Rs <%=product.getPrice()%></span>
+						<span class="discounted">Rs <%=product.getDiscountedPrice()%></span>
+					</c:if>
+					<c:if test="${product.getDiscountedPrice() == 0.0}">
+						<span class="discounted">Rs <%=product.getPrice()%></span>
+					</c:if>
+
+				</p>
+				<p class="short-description"><%=product.getShortDescription()%></p>
+
+				<c:if test="${product.getStockQty() == 0}">
+					<p
+						style="color: red; text-align: center; font-size: 24px; margin-top: 10px;">Out
+						of stock!</p>
+				</c:if>
+
+				<c:if test="${product.getStockQty() != 0}">
+					<form class="product-options" action="product-details"
+						method="post" style="margin-top: 20px">
+						<!-- Passing the product ID as hidden input -->
+						<input type="hidden" name="id" value="<%=product.getProductId()%>">
+
+						<c:forEach var="variant" items="${productVariants}">
+							<div class="option-row">
+								<label for="variant-${variant.getProductVariantId()}">${variant.getVariantName()}</label>
+								<select name="variant-${variant.getProductVariantId()}"
+									id="variant-${variant.getProductVariantId()}">
+									<c:forEach var="variantValue"
+										items="${variant.getVariantValues()}">
+										<option value="${variantValue.getProductVariantValueId()}">${variantValue.getVariantValue()}</option>
+									</c:forEach>
+								</select>
+							</div>
+						</c:forEach>
+
+
+
+						<div class="option-row">
+							<label for="quantity">Quantity</label>
+							<div class="quantity-control">
+								<button type="button" onclick="decreaseQuantity()">-</button>
+								<input type="number" name="quantity" value="1" min="1"
+									max="${product.getStockQty()}">
+								<button type="button" onclick="increaseQuantity()">+</button>
+							</div>
+						</div>
+
+						<button type="submit" class="add-to-cart">
+							<span class="cart-icon"></span> Add to cart
+						</button>
+					</form>
+				</c:if>
 
 			</div>
-    </div>
-
-    <div class="highlights">
-        <div class="highlight">
-            <img src="<%= request.getContextPath() %>/resources/system/images/ProductPageLogo/Authentic.png" alt="">
-            <p>100% Original<br><small>Authentic Nepalese craftsmanship</small></p>
-        </div>
-        <div class="highlight">
-            <img src="<%= request.getContextPath() %>/resources/system/images/ProductPageLogo/Replacement.png" alt="">
-            <p>10 Day Replacement<br><small>Full replacement within 10 days</small></p>
-        </div>
-        <div class="highlight">
-            <img src="<%= request.getContextPath() %>/resources/system/images/ProductPageLogo/Warranty.png" alt="">
-            <p>1 Year Warranty<br><small>365-day quality guarantee</small></p>
-        </div>
-    </div>
-
-    <div class="tabs">
-        <button class="active">Description</button>
-    </div>
-
-    <div class="tab-content">
-        <h6>Product details</h6>
-        <p>
-            Experience the perfect blend of traditional craftsmanship and modern comfort with our exquisite <%= product.getName() %>. Handcrafted by skilled Nepalese artisans using sustainable bamboo and premium cane weaving techniques perfected over generations, this elegantly designed piece transforms any living space into a sanctuary of relaxation and style.
-            <br><br>
-            The sturdy bamboo frame provides exceptional durability while maintaining a lightweight aesthetic that brings a touch of nature indoors. Its intricate cane weaving showcases the dedication and talent of our artisans, resulting in furniture that is not only beautiful but also environmentally conscious.
-            <br><br>
-            Perfect for living rooms, patios, or reading nooks, this item is a testament to timeless design. Add the Gecheer Sofa with Cushion to your home today and enjoy comfort, durability, and the warm elegance of Nepalese heritage.
-        </p>
-    </div>
+		</div>
+
+		<div class="highlights">
+			<div class="highlight">
+				<img
+					src="<%=request.getContextPath()%>/resources/system/images/ProductPageLogo/Authentic.png"
+					alt="">
+				<p>
+					100% Original<br> <small>Authentic Nepalese
+						craftsmanship</small>
+				</p>
+			</div>
+			<div class="highlight">
+				<img
+					src="<%=request.getContextPath()%>/resources/system/images/ProductPageLogo/Replacement.png"
+					alt="">
+				<p>
+					10 Day Replacement<br> <small>Full replacement within
+						10 days</small>
+				</p>
+			</div>
+			<div class="highlight">
+				<img
+					src="<%=request.getContextPath()%>/resources/system/images/ProductPageLogo/Warranty.png"
+					alt="">
+				<p>
+					1 Year Warranty<br> <small>365-day quality guarantee</small>
+				</p>
+			</div>
+		</div>
+
+		<div class="tabs">
+			<button class="active">Description</button>
+		</div>
+
+		<div class="tab-content">
+			<h6>Product details</h6>
+			<p>
+				<%=product.getLongDescription()%>
+			</p>
+		</div>
 
 		<script>
     const images = [
-        "<%= request.getContextPath() %>/resources/system/images/<%= product.getImage() %>",
-        "<%= request.getContextPath() %>/resources/system/images/<%= product.getImage() %>",
-        "<%= request.getContextPath() %>/resources/system/images/<%= product.getImage() %>",
-        "<%= request.getContextPath() %>/resources/system/images/<%= product.getImage() %>",
-        "<%= request.getContextPath() %>/resources/system/images/<%= product.getImage() %>"
+        "<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>.png",
+        "<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>-2.png",
+        "<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>-3.png",
+        "<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>-4.png",
+        "<%=request.getContextPath()%>/resources/product-images/<%=product.getProductId()%>-5.png"
     ];
 
     let currentIndex = 0;
@@ -159,7 +195,7 @@
     
     function increaseQuantity() {
         const qtyInput = document.querySelector('input[name="quantity"]');
-        qtyInput.value = parseInt(qtyInput.value) + 1;
+        qtyInput.value = Math.min(parseInt(qtyInput.value) + 1, ${product.getStockQty()});
     }
 
     function decreaseQuantity() {
@@ -171,14 +207,14 @@
 </script>
 
 
-<%
-    } else {
-%>
-    <p style="color:red;">Product not found.</p>
-<%
-    }
-%>
-<jsp:include page="../footer.jsp" />
-</main>
+		<%
+		} else {
+		%>
+		<p style="color: red;">Product not found.</p>
+		<%
+		}
+		%>
+		<jsp:include page="../footer.jsp" />
+	</main>
 </body>
 </html>
diff --git a/main/webapp/WEB-INF/pages/products/product-listing.jsp b/main/webapp/WEB-INF/pages/products/product-listing.jsp
index f88d3e8..8f40d51 100644
--- a/main/webapp/WEB-INF/pages/products/product-listing.jsp
+++ b/main/webapp/WEB-INF/pages/products/product-listing.jsp
@@ -1,64 +1,79 @@
 <%@ page language="java" contentType="text/html; charset=UTF-8"
-    pageEncoding="UTF-8" import="java.util.List, com.nestandrest.model.Product" %>
+	pageEncoding="UTF-8"
+	import="java.util.List, com.nestandrest.model.ProductModel"%>
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
 <!DOCTYPE html>
 <html lang="en">
 <head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Product Listing - Nest and Rest</title>
-    <jsp:include page="../head.jsp" />
-    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/product-listing.css">
+<meta charset="UTF-8">
+<meta name="viewport" content="width=device-width, initial-scale=1.0">
+<title>Product Listing - Nest and Rest</title>
+<jsp:include page="../head.jsp" />
+<link rel="stylesheet"
+	href="${pageContext.request.contextPath}/css/product-listing.css">
 </head>
 
 <body>
-<jsp:include page="../header.jsp" />
-<main class="product-page container">
-    <div class="product-header">
-    <div class="product-header-top">
-        <h4>Shop</h4>
-        <div class="search-sort-container">
-        
-        		<input type="text" placeholder="Search..." class="search-input"/>
-	    	
-	    		<div class filter-controls>
-			        <select class="category-select" onchange="filterCategory(this.value)">
-			            <option value="all" <%= (request.getAttribute("selectedCategory") == null || "all".equals(request.getAttribute("selectedCategory"))) ? "selected" : "" %>>All Categories</option>
-			            <option value="sofa" <%= "sofa".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Sofas</option>
-			            <option value="chair" <%= "chair".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Chairs</option>
-			            <option value="stool" <%= "stool".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Stools</option>
-			            <option value="rack" <%= "rack".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Racks</option>
-			            <option value="hanger" <%= "hanger".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Hangers</option>
-			            <option value="table" <%= "table".equals(request.getAttribute("selectedCategory")) ? "selected" : "" %>>Tables</option>
-			        </select>
-			
-			        <select class="sort-select">
-			            <option>Sort by: Featured</option>
-			            <option>Price: Low to High</option>
-			            <option>Price: High to Low</option>
-			        </select>
-		        </div>
+	<jsp:include page="../header.jsp" />
+	<main class="product-page container">
+		<div class="product-header">
+			<div class="product-header-top">
+				<h4>Shop</h4>
+				<form class="search-sort-container">
+
+					<input type="text" placeholder="Search..." class="search-input"
+						name="search" value="${searchQuery}" />
+
+					<div class filter-controls>
+						<select class="category-select" name="category"
+							onchange="form.submit()">
+							<option value="0"
+								<%=(request.getAttribute("selectedCategory") == null || "0".equals(request.getAttribute("selectedCategory")))
+		? "selected"
+		: ""%>>All
+								Categories</option>
+
+							<c:forEach var="category" items="${allCategories}">
+								<option value="${category.getCategoryId()}"
+									${category.getCategoryId() == selectedCategory ? 'selected' : ''}>${category.getName()}</option>
+							</c:forEach>
+						</select> <select class="sort-select" name="order" onchange="form.submit()">
+							<option value="new" ${orderByQuery == 'new' ? 'selected' : ''}>Sort
+								by: Newest First</option>
+							<option value="cheap"
+								${orderByQuery == 'cheap' ? 'selected' : ''}>Price: Low
+								to High</option>
+							<option value="expensive"
+								${orderByQuery == 'expensive' ? 'selected' : ''}>Price:
+								High to Low</option>
+						</select>
+					</div>
 					<a href="cart.jsp" class="cart-icon"> <img
 						src="${pageContext.request.contextPath}/resources/system/images/ProductPageLogo/AddToCartIcon.png"
 						alt="Cart" /> <span class="cart-count"></span>
 					</a>
+				</form>
 			</div>
-</div>
-</div>
+		</div>
 
 		<div class="product-grid">
 			<%
-			List<Product> products = (List<Product>) request.getAttribute("products");
+			List<ProductModel> products = (List<ProductModel>) request.getAttribute("products");
 			if (products != null && !products.isEmpty()) {
-				for (Product p : products) {
+				for (ProductModel p : products) {
 			%>
-			<a href="product-details?id=<%=products.indexOf(p)%>"
+			<a href="product-details?id=<%=p.getProductId()%>"
 				style="text-decoration: none; color: inherit;">
 				<div class="product-card">
 					<img
-						src="<%=request.getContextPath()%>/resources/system/images/<%=p.getImage()%>"
+						src="<%=request.getContextPath()%>/resources/product-images/<%=p.getProductId()%>.png"
 						alt="<%=p.getName()%>">
 					<h5><%=p.getName()%></h5>
-					<p>Rs.<%= String.format("%.2f", p.getPrice()) %></p>
+					<p>
+						Rs <span
+							class="<%=p.getDiscountedPrice() != 0.0 ? "strike" : ""%>"><%=String.format("%.2f", p.getPrice())%></span>
+						<span><%=p.getDiscountedPrice() != 0.0 ? String.format("%.2f", p.getDiscountedPrice()) : ""%></span>
+					</p>
 
 				</div>
 			</a>
@@ -66,47 +81,39 @@
 			}
 			} else {
 			%>
-			<p style="color: red;">No products found for this category.</p>
+			<p style="color: red;">No products found!</p>
 			<%
 			}
 			%>
 		</div>
 
-		
 
-    <div class="pagination">
-    <%
-        Integer totalPages = (Integer) request.getAttribute("totalPages");
-        Integer currentPage = (Integer) request.getAttribute("currentPage");
-        String selectedCategory = (String) request.getAttribute("selectedCategory");
 
-        if (totalPages != null && currentPage != null) {
-            for (int i = 1; i <= totalPages; i++) {
-                if (i == currentPage) {
-    %>
-                    <span class="active"><%= i %></span>
-    <%
-                } else {
-    %>
-                    <a href="products?<%= selectedCategory != null ? "category=" + selectedCategory + "&" : "" %>page=<%= i %>"><%= i %></a>
-    <%
-                }
-            }
-        }
-    %>
-</div>
+		<div class="pagination">
+			<%
+			Integer totalPages = (Integer) request.getAttribute("totalPages");
+			Integer currentPage = (Integer) request.getAttribute("currentPage");
+			String selectedCategory = (String) request.getAttribute("selectedCategory");
+
+			if (totalPages != null && currentPage != null) {
+				for (int i = 1; i <= totalPages; i++) {
+					if (i == currentPage) {
+			%>
+			<span class="active"><%=i%></span>
+			<%
+			} else {
+			%>
+			<a
+				href="products?<%=selectedCategory != null ? "category=" + selectedCategory + "&" : ""%>page=<%=i%>"><%=i%></a>
+			<%
+			}
+			}
+			}
+			%>
+		</div>
 
-</main>
+	</main>
 
-<jsp:include page="../footer.jsp" />
-<script>
-    function filterCategory(category) {
-        if (category === 'all') {
-            window.location.href = 'products';
-        } else {
-            window.location.href = 'products?category=' + category;
-        }
-    }
-</script>
+	<jsp:include page="../footer.jsp" />
 </body>
 </html>
\ No newline at end of file
diff --git a/main/webapp/css/product-listing.css b/main/webapp/css/product-listing.css
index 955db16..6515642 100644
--- a/main/webapp/css/product-listing.css
+++ b/main/webapp/css/product-listing.css
@@ -45,19 +45,18 @@
 
 .filter-controls {
 	margin-left: 250px;
-    display: flex;
-    flex-wrap: wrap;
-    gap: 25px;
+	display: flex;
+	flex-wrap: wrap;
+	gap: 25px;
 }
 
-.category-select,
-.sort-select {
-    padding: 8px 14px;
-    font-size: 14px;
-    border: 1px solid #ccc;
-    border-radius: 8px;
-    min-width: 80px;
-    gap: 25px;
+.category-select, .sort-select {
+	padding: 8px 14px;
+	font-size: 14px;
+	border: 1px solid #ccc;
+	border-radius: 8px;
+	min-width: 80px;
+	gap: 25px;
 }
 
 .product-grid {
@@ -132,7 +131,6 @@
 	justify-content: center;
 }
 
-
 .pagination {
 	display: flex;
 	justify-content: center;
@@ -162,44 +160,43 @@
 }
 
 @media screen and (max-width: 1024px) {
-  .product-grid {
-    grid-template-columns: repeat(3, 1fr);
-  }
+	.product-grid {
+		grid-template-columns: repeat(3, 1fr);
+	}
 }
 
 @media screen and (max-width: 768px) {
-  .product-grid {
-    grid-template-columns: repeat(2, 1fr);
-    gap: 20px;
-    padding: 0 16px;
-  }
-
-  .search-sort-container {
-    flex-direction: column;
-    align-items: flex-start;
-    gap: 20px;
-  }
-
-  .filter-controls {
-    flex-direction: column;
-    align-items: flex-start;
-    margin-left: 0;
-    gap: 10px;
-  }
-
-  .search-input {
-    width: 100%;
-  }
-
-  .category-select,
-  .sort-select {
-    width: 100%;
-  }
+	.product-grid {
+		grid-template-columns: repeat(2, 1fr);
+		gap: 20px;
+		padding: 0 16px;
+	}
+	.search-sort-container {
+		flex-direction: column;
+		align-items: flex-start;
+		gap: 20px;
+	}
+	.filter-controls {
+		flex-direction: column;
+		align-items: flex-start;
+		margin-left: 0;
+		gap: 10px;
+	}
+	.search-input {
+		width: 100%;
+	}
+	.category-select, .sort-select {
+		width: 100%;
+	}
 }
 
 @media screen and (max-width: 480px) {
-  .product-grid {
-    grid-template-columns: 1fr;
-    padding: 0 12px;
-  }
+	.product-grid {
+		grid-template-columns: 1fr;
+		padding: 0 12px;
+	}
 }
+
+.strike {
+	text-decoration: line-through;
+}
\ No newline at end of file
diff --git a/main/webapp/resources/product-images/1.png b/main/webapp/resources/product-images/1.png
new file mode 100644
index 0000000..6bb6115
Binary files /dev/null and b/main/webapp/resources/product-images/1.png differ
diff --git a/main/webapp/resources/product-images/10.png b/main/webapp/resources/product-images/10.png
new file mode 100644
index 0000000..8e1ad88
Binary files /dev/null and b/main/webapp/resources/product-images/10.png differ
diff --git a/main/webapp/resources/product-images/11.png b/main/webapp/resources/product-images/11.png
new file mode 100644
index 0000000..712fec4
Binary files /dev/null and b/main/webapp/resources/product-images/11.png differ
diff --git a/main/webapp/resources/product-images/12.png b/main/webapp/resources/product-images/12.png
new file mode 100644
index 0000000..eb353f8
Binary files /dev/null and b/main/webapp/resources/product-images/12.png differ
diff --git a/main/webapp/resources/product-images/2.png b/main/webapp/resources/product-images/2.png
new file mode 100644
index 0000000..dfb7a9a
Binary files /dev/null and b/main/webapp/resources/product-images/2.png differ
diff --git a/main/webapp/resources/product-images/3.png b/main/webapp/resources/product-images/3.png
new file mode 100644
index 0000000..db9f82b
Binary files /dev/null and b/main/webapp/resources/product-images/3.png differ
diff --git a/main/webapp/resources/product-images/4.png b/main/webapp/resources/product-images/4.png
new file mode 100644
index 0000000..966abef
Binary files /dev/null and b/main/webapp/resources/product-images/4.png differ
diff --git a/main/webapp/resources/product-images/5.png b/main/webapp/resources/product-images/5.png
new file mode 100644
index 0000000..de8b872
Binary files /dev/null and b/main/webapp/resources/product-images/5.png differ
diff --git a/main/webapp/resources/product-images/6.png b/main/webapp/resources/product-images/6.png
new file mode 100644
index 0000000..50d7d49
Binary files /dev/null and b/main/webapp/resources/product-images/6.png differ
diff --git a/main/webapp/resources/product-images/7.png b/main/webapp/resources/product-images/7.png
new file mode 100644
index 0000000..e7c663e
Binary files /dev/null and b/main/webapp/resources/product-images/7.png differ
diff --git a/main/webapp/resources/product-images/8.png b/main/webapp/resources/product-images/8.png
new file mode 100644
index 0000000..e779097
Binary files /dev/null and b/main/webapp/resources/product-images/8.png differ
diff --git a/main/webapp/resources/product-images/9.png b/main/webapp/resources/product-images/9.png
new file mode 100644
index 0000000..5e815aa
Binary files /dev/null and b/main/webapp/resources/product-images/9.png differ
